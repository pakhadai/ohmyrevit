"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API —Ç–æ–≤–∞—Ä—ñ–≤
–ó–∞–ø—É—Å–∫–∞–π—Ç–µ –ø—ñ—Å–ª—è —Å—Ç–∞—Ä—Ç—É —Å–µ—Ä–≤–µ—Ä–∞: python test_products.py
"""
import asyncio
import httpx
import json
from datetime import datetime

BASE_URL = "http://localhost:8000"
ADMIN_TOKEN = "y9f7c2b8e4a1d6c3f7e9a0d2c5b4e8f1a7c9d3f0b6a2e7c4d8f9b0a3d5e6c1f2"  # –û—Ç—Ä–∏–º–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ª–æ–≥—ñ–Ω –∞–¥–º—ñ–Ω–∞


async def test_create_category():
    """–¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    async with httpx.AsyncClient() as client:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        categories = [
            {"name": "–ú–µ–±–ª—ñ", "slug": "furniture"},
            {"name": "–û—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è", "slug": "lighting"},
            {"name": "–î–µ–∫–æ—Ä", "slug": "decor"},
            {"name": "–°–∞–Ω—Ç–µ—Ö–Ω—ñ–∫–∞", "slug": "plumbing"}
        ]

        for cat_data in categories:
            response = await client.post(
                f"{BASE_URL}/api/v1/admin/products/categories",
                json=cat_data,
                headers={"Authorization": f"Bearer {ADMIN_TOKEN}"}
            )

            if response.status_code == 200:
                print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è '{cat_data['name']}' —Å—Ç–≤–æ—Ä–µ–Ω–∞")
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: {response.text}")


async def test_create_product():
    """–¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É"""
    async with httpx.AsyncClient() as client:
        # –î–∞–Ω—ñ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É
        product_data = {
            "title_uk": "–°—É—á–∞—Å–Ω–∏–π –æ—Ñ—ñ—Å–Ω–∏–π —Å—Ç—ñ–ª IKEA Style",
            "description_uk": """
                –í–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∞ 3D –º–æ–¥–µ–ª—å –æ—Ñ—ñ—Å–Ω–æ–≥–æ —Å—Ç–æ–ª—É –≤ —Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å—å–∫–æ–º—É —Å—Ç–∏–ª—ñ.

                –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
                - –î–µ—Ç–∞–ª—å–Ω–∞ –≥–µ–æ–º–µ—Ç—Ä—ñ—è –∑ —É—Å—ñ–º–∞ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏
                - –†–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ —Ç–∞ —Ç–µ–∫—Å—Ç—É—Ä–∏
                - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏—á–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
                - –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤

                –í –∫–æ–º–ø–ª–µ–∫—Ç—ñ:
                - –û—Å–Ω–æ–≤–Ω–∞ –º–æ–¥–µ–ª—å —Å—Ç–æ–ª—É
                - 5 –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –∫–æ–ª—å–æ—Ä—ñ–≤
                - –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∞–∫—Å–µ—Å—É–∞—Ä–∏ (–ª–∞–º–ø–∞, –æ—Ä–≥–∞–Ω–∞–π–∑–µ—Ä)

                –Ü–¥–µ–∞–ª—å–Ω–æ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –æ—Ñ—ñ—Å–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤!
            """,
            "price": 49.99,
            "product_type": "premium",
            "main_image_url": "https://example.com/images/desk-main.jpg",
            "gallery_image_urls": [
                "https://example.com/images/desk-1.jpg",
                "https://example.com/images/desk-2.jpg",
                "https://example.com/images/desk-3.jpg"
            ],
            "zip_file_path": "/files/modern_office_desk.zip",
            "file_size_mb": 125.5,
            "compatibility": "Revit 2021-2024",
            "is_on_sale": True,
            "sale_price": 34.99,
            "category_ids": [1]  # ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ú–µ–±–ª—ñ"
        }

        response = await client.post(
            f"{BASE_URL}/api/v1/admin/products",
            json=product_data,
            headers={"Authorization": f"Bearer {ADMIN_TOKEN}"}
        )

        if response.status_code == 200:
            product = response.json()
            print(f"‚úÖ –¢–æ–≤–∞—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ ID: {product['id']}")
            print(f"   –ù–∞–∑–≤–∞: {product['title']}")
            print(f"   –¶—ñ–Ω–∞: ${product['actual_price']}")
            return product['id']
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É: {response.text}")
            return None


async def test_get_products():
    """–¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä—ñ–≤"""
    async with httpx.AsyncClient() as client:
        # –¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ –º–æ–≤–∏
        languages = ["uk", "en", "ru"]

        for lang in languages:
            print(f"\nüìã –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –º–æ–≤–æ—é: {lang}")

            response = await client.get(
                f"{BASE_URL}/api/v1/products",
                headers={"Accept-Language": lang},
                params={
                    "limit": 10,
                    "sort_by": "newest"
                }
            )

            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: {data['total']}")

                if data['products']:
                    product = data['products'][0]
                    print(f"   –ü–µ—Ä—à–∏–π —Ç–æ–≤–∞—Ä: {product['title']}")
                    print(f"   –û–ø–∏—Å: {product['description'][:100]}...")
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {response.text}")


async def test_get_product_detail():
    """–¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä"""
    async with httpx.AsyncClient() as client:
        # –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤
        response = await client.get(f"{BASE_URL}/api/v1/products")

        if response.status_code == 200:
            data = response.json()

            if data['products']:
                product_id = data['products'][0]['id']

                # –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
                print(f"\nüì¶ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ID: {product_id}")

                for lang in ["uk", "en", "ru"]:
                    response = await client.get(
                        f"{BASE_URL}/api/v1/products/{product_id}",
                        headers={"Accept-Language": lang}
                    )

                    if response.status_code == 200:
                        product = response.json()
                        print(f"‚úÖ [{lang}] {product['title']}")
                    else:
                        print(f"‚ùå [{lang}] –ü–æ–º–∏–ª–∫–∞: {response.text}")


async def test_filters():
    """–¢–µ—Å—Ç —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤"""
    async with httpx.AsyncClient() as client:
        print("\nüîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤")

        # –¢–µ—Å—Ç —Ñ—ñ–ª—å—Ç—Ä—É –ø–æ —Ç–∏–ø—É
        response = await client.get(
            f"{BASE_URL}/api/v1/products",
            params={"product_type": "premium"}
        )
        print(f"Premium —Ç–æ–≤–∞—Ä–∏: {response.json()['total']}")

        # –¢–µ—Å—Ç —Ñ—ñ–ª—å—Ç—Ä—É –ø–æ –∑–Ω–∏–∂—Ü—ñ
        response = await client.get(
            f"{BASE_URL}/api/v1/products",
            params={"is_on_sale": True}
        )
        print(f"–¢–æ–≤–∞—Ä–∏ –∑—ñ –∑–Ω–∏–∂–∫–æ—é: {response.json()['total']}")

        # –¢–µ—Å—Ç —Ñ—ñ–ª—å—Ç—Ä—É –ø–æ —Ü—ñ–Ω—ñ
        response = await client.get(
            f"{BASE_URL}/api/v1/products",
            params={
                "min_price": 10,
                "max_price": 50
            }
        )
        print(f"–¢–æ–≤–∞—Ä–∏ $10-50: {response.json()['total']}")


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API —Ç–æ–≤–∞—Ä—ñ–≤\n")
    print("=" * 50)

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ
    print("\n1Ô∏è‚É£ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")
    await test_create_category()

    print("\n2Ô∏è‚É£ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É")
    product_id = await test_create_product()

    # –ß–µ–∫–∞—î–º–æ –ø–æ–∫–∏ –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è –ø–µ—Ä–µ–∫–ª–∞–¥
    if product_id:
        print("\n‚è≥ –ß–µ–∫–∞—î–º–æ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—É...")
        await asyncio.sleep(5)

    print("\n3Ô∏è‚É£ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä—ñ–≤")
    await test_get_products()

    print("\n4Ô∏è‚É£ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó")
    await test_get_product_detail()

    print("\n5Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤")
    await test_filters()

    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ —Ç–µ—Å—Ç–∏
    asyncio.run(main())