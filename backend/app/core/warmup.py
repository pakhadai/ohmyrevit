# backend/app/core/warmup.py
"""
–ü—Ä–æ–≥—Ä—ñ–≤ –¥–æ–¥–∞—Ç–∫—É –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è —Ö–æ–ª–æ–¥–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç—É
"""
import asyncio
import logging
from sqlalchemy import text
from app.core.database import engine

logger = logging.getLogger(__name__)


async def warmup_database():
    """–ü—Ä–æ–≥—Ä—ñ–≤–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö"""
    try:
        async with engine.connect() as conn:
            # –ü—Ä–æ—Å—Ç–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è
            result = await conn.execute(text("SELECT 1"))
            result.scalar()
            logger.info("‚úÖ Database connection warmed up")
    except Exception as e:
        logger.error(f"‚ùå Database warmup failed: {e}")


async def warmup_application():
    """–í–∏–∫–æ–Ω—É—î –ø—Ä–æ–≥—Ä—ñ–≤ –≤—Å—å–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É"""
    logger.info("üî• Starting application warmup...")

    # –ü—Ä–æ–≥—Ä—ñ–≤–∞—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    await warmup_database()

    # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —ñ–Ω—à—ñ –ø—Ä–æ–≥—Ä—ñ–≤–∏ (Redis, –∑–æ–≤–Ω—ñ—à–Ω—ñ API)

    logger.info("‚úÖ Application warmup completed")