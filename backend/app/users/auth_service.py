# backend/app/users/auth_service.py
"""
–°–µ—Ä–≤—ñ—Å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —á–µ—Ä–µ–∑ Telegram
"""
import hashlib
import hmac
import time
import json
from datetime import datetime, timedelta
from typing import Optional, Dict, Any
from jose import JWTError, jwt
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from fastapi import HTTPException, status
import logging

from app.core.config import settings
from app.users.models import User
from app.users.schemas import TelegramAuthData

logger = logging.getLogger(__name__)


class AuthService:
    """
    –°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é
    """

    @staticmethod
    def verify_telegram_auth(auth_data: dict) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å—É –¥–∞–Ω–∏—Ö –≤—ñ–¥ Telegram

        Args:
            auth_data: –°–ª–æ–≤–Ω–∏–∫ –∑ –¥–∞–Ω–∏–º–∏ –≤—ñ–¥ Telegram

        Returns:
            True —è–∫—â–æ –¥–∞–Ω—ñ –≤–∞–ª—ñ–¥–Ω—ñ
        """
        # –í —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É
        if settings.DEBUG:
            logger.info("üîß Debug mode: skipping Telegram auth verification")
            return True

        if not settings.TELEGRAM_BOT_TOKEN:
            logger.warning("‚ö†Ô∏è TELEGRAM_BOT_TOKEN not configured!")
            return settings.DEBUG

        auth_dict = auth_data.copy()
        received_hash = auth_dict.pop('hash', '')

        # –õ–æ–≥—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ
        logger.info(
            f"üì• Received auth data: {json.dumps({k: v for k, v in auth_dict.items() if k != 'hash'}, default=str)}")

        # –î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        if not received_hash or received_hash == 'test_hash_for_development':
            return settings.DEBUG

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É
        auth_date = auth_dict.get('auth_date', 0)
        if time.time() - int(auth_date) > 86400:  # 24 –≥–æ–¥–∏–Ω–∏
            logger.warning("‚è∞ Auth data is too old")
            return False

        # –§–æ—Ä–º—É—î–º–æ —Ä—è–¥–æ–∫ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        check_string_parts = []
        for key in sorted(auth_dict.keys()):
            value = auth_dict[key]
            if value is not None:
                if isinstance(value, (dict, list)):
                    value = json.dumps(value, separators=(',', ':'))
                check_string_parts.append(f"{key}={value}")

        check_string = "\n".join(check_string_parts)
        logger.debug(f"Check string: {check_string}")

        # –û–±—á–∏—Å–ª—é—î–º–æ —Ö–µ—à
        secret_key = hashlib.sha256(settings.TELEGRAM_BOT_TOKEN.encode()).digest()
        computed_hash = hmac.new(secret_key, check_string.encode(), hashlib.sha256).hexdigest()

        is_valid = computed_hash == received_hash
        logger.info(f"‚úÖ Auth validation result: {is_valid}")

        return is_valid

    @staticmethod
    def create_access_token(user_id: int) -> str:
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è JWT —Ç–æ–∫–µ–Ω—É

        Args:
            user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

        Returns:
            JWT —Ç–æ–∫–µ–Ω
        """
        expire = datetime.utcnow() + timedelta(hours=settings.JWT_EXPIRATION_HOURS)
        payload = {
            "sub": str(user_id),
            "exp": expire,
            "iat": datetime.utcnow()
        }
        token = jwt.encode(payload, settings.SECRET_KEY, algorithm=settings.JWT_ALGORITHM)
        logger.info(f"üîë Created token for user {user_id}")
        return token

    @staticmethod
    def verify_token(token: str) -> Optional[int]:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω—É

        Args:
            token: JWT —Ç–æ–∫–µ–Ω

        Returns:
            ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ None
        """
        try:
            payload = jwt.decode(
                token,
                settings.SECRET_KEY,
                algorithms=[settings.JWT_ALGORITHM]
            )
            user_id = int(payload.get("sub"))
            return user_id
        except (JWTError, ValueError) as e:
            logger.error(f"‚ùå Token verification failed: {e}")
            return None

    @staticmethod
    async def authenticate_telegram_user(
            db: AsyncSession,
            auth_data: TelegramAuthData
    ) -> User:
        """
        –ê–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ Telegram.
        –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –æ–Ω–æ–≤–ª—é—î —ñ—Å–Ω—É—é—á–æ–≥–æ.

        Args:
            db: –°–µ—Å—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            auth_data: –î–∞–Ω—ñ –≤—ñ–¥ Telegram

        Returns:
            –û–±'—î–∫—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        """
        logger.info(f"üîÑ Starting authentication for Telegram user {auth_data.id}")

        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        auth_data_dict = auth_data.model_dump(exclude_none=True)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–ø–∏—Å (–≤ –ø—Ä–æ–¥–∞–∫—à–Ω—ñ)
        if not settings.DEBUG:
            if not AuthService.verify_telegram_auth(auth_data_dict):
                logger.error("‚ùå Invalid Telegram authentication data")
                raise HTTPException(
                    status_code=status.HTTP_401_UNAUTHORIZED,
                    detail="Invalid Telegram authentication data"
                )

        # –®—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î
        result = await db.execute(
            select(User).where(User.telegram_id == auth_data.id)
        )
        user = result.scalar_one_or_none()

        # –ì–æ—Ç—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        user_data = {
            'username': auth_data.username,
            'first_name': auth_data.first_name or f'User {auth_data.id}',
            'last_name': auth_data.last_name,
            'language_code': auth_data.language_code or 'uk',
            'photo_url': auth_data.photo_url,
            'last_login_at': datetime.utcnow()
        }

        if user:
            # –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            logger.info(f"üìù Updating existing user {user.id}")
            for key, value in user_data.items():
                if value is not None:  # –û–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–µ–ø—É—Å—Ç—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
                    setattr(user, key, value)
        else:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            logger.info(f"‚ú® Creating new user with telegram_id {auth_data.id}")

            user = User(
                telegram_id=auth_data.id,
                **user_data
            )

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –ø–µ—Ä—à–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á (—Ä–æ–±–∏–º–æ –∞–¥–º—ñ–Ω–æ–º)
            first_user_check = await db.execute(select(User.id).limit(1))
            if not first_user_check.scalar_one_or_none():
                user.is_admin = True
                logger.info("üëë First user - setting as admin")

            db.add(user)

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
        try:
            await db.commit()
            await db.refresh(user)
            logger.info(f"‚úÖ User {user.id} authenticated successfully")
        except Exception as e:
            logger.error(f"‚ùå Database error: {e}")
            await db.rollback()
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Failed to save user data"
            )

        return user