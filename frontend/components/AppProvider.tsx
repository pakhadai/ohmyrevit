'use client';

import { useEffect, useState } from 'react';
import { useAuthStore } from '@/store/authStore';
import Onboarding from './Onboarding';
import toast from 'react-hot-toast';

// –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Telegram WebApp
interface TelegramWebApp {
  initData: string;
  initDataUnsafe: {
    user?: {
      id: number;
      first_name: string;
      last_name?: string;
      username?: string;
      language_code?: string;
      is_premium?: boolean;
      photo_url?: string;
    };
    auth_date: number;
    hash: string;
    query_id?: string;
  };
  ready: () => void;
  expand: () => void;
  close: () => void;
  MainButton: {
    show: () => void;
    hide: () => void;
    setText: (text: string) => void;
  };
  BackButton: {
    show: () => void;
    hide: () => void;
  };
  version: string;
  platform: string;
  colorScheme: string;
  themeParams: any;
}

declare global {
  interface Window {
    Telegram?: {
      WebApp: TelegramWebApp;
    };
  }
}

export default function AppProvider({ children }: { children: React.ReactNode }) {
  const { user, login, isLoading, isAuthenticated, checkTokenValidity } = useAuthStore();
  const [showOnboarding, setShowOnboarding] = useState(false);
  const [initAttempted, setInitAttempted] = useState(false);
  const [initReady, setInitReady] = useState(false);

  useEffect(() => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ç–æ–∫–µ–Ω
    checkTokenValidity();

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∑ Telegram
    const initializeTelegram = async () => {
      // –Ø–∫—â–æ –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –∞–±–æ —Å–ø—Ä–æ–±–∞ –≤–∂–µ –±—É–ª–∞ - –≤–∏—Ö–æ–¥–∏–º–æ
      if (isAuthenticated || initAttempted) return;

      console.log('üîÑ –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Telegram WebApp...');

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å Telegram WebApp
      if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
        const tg = window.Telegram.WebApp;

        // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ Telegram —â–æ –¥–æ–¥–∞—Ç–æ–∫ –≥–æ—Ç–æ–≤–∏–π
        tg.ready();
        tg.expand();

        console.log('üì± Telegram WebApp –∑–Ω–∞–π–¥–µ–Ω–æ:', {
          version: tg.version,
          platform: tg.platform,
          colorScheme: tg.colorScheme
        });

        // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const initDataUnsafe = tg.initDataUnsafe;
        console.log('üë§ –î–∞–Ω—ñ –≤—ñ–¥ Telegram:', initDataUnsafe);

        if (initDataUnsafe && initDataUnsafe.user) {
          const telegramUser = initDataUnsafe.user;

          // –§–æ—Ä–º—É—î–º–æ –æ–±'—î–∫—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∑ –£–°–Ü–ú–ê –ø–æ–ª—è–º–∏
          const authData = {
            id: telegramUser.id,
            first_name: telegramUser.first_name || 'User',
            last_name: telegramUser.last_name || '',
            username: telegramUser.username || '',
            photo_url: telegramUser.photo_url || '',
            language_code: telegramUser.language_code || 'uk',
            is_premium: telegramUser.is_premium || false,
            auth_date: initDataUnsafe.auth_date,
            hash: initDataUnsafe.hash,
            query_id: initDataUnsafe.query_id || '',
            // –î—É–±–ª—é—î–º–æ user –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ –±–µ–∫–µ–Ω–¥–æ–º
            user: telegramUser
          };

          console.log('‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–∞–Ω—ñ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é:', authData);

          try {
            // –í–∏–∫–ª–∏–∫–∞—î–º–æ –ª–æ–≥—ñ–Ω —ñ —á–µ–∫–∞—î–º–æ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await login(authData);
            console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!');
            toast.success('–í—Ö—ñ–¥ –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
          } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:', error);
            toast.error('–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
          }

          setInitAttempted(true);
        } else {
          console.warn('‚ö†Ô∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥ Telegram');

          // –î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤ –±—Ä–∞—É–∑–µ—Ä—ñ (—Ç—ñ–ª—å–∫–∏ –≤ —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏!)
          if (process.env.NODE_ENV === 'development') {
            console.log('üß™ –†–µ–∂–∏–º —Ä–æ–∑—Ä–æ–±–∫–∏: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ');

            // –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            const randomId = Math.floor(Math.random() * 1000000) + 100000;
            const testData = {
              id: randomId,
              first_name: 'Test',
              last_name: 'User',
              username: `testuser_${randomId}`,
              photo_url: `https://avatar.vercel.sh/${randomId}.png`,
              language_code: 'uk',
              is_premium: false,
              auth_date: Math.floor(Date.now() / 1000),
              hash: 'test_hash_for_development',
              query_id: 'test_query',
              user: {
                id: randomId,
                first_name: 'Test',
                last_name: 'User',
                username: `testuser_${randomId}`,
                photo_url: `https://avatar.vercel.sh/${randomId}.png`,
                language_code: 'uk',
                is_premium: false
              }
            };

            try {
              await login(testData);
              console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!');
            } catch (error) {
              console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:', error);
            }

            setInitAttempted(true);
          }
        }
      } else {
        console.warn('‚ö†Ô∏è Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π, —Å–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑...');

        // –°–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 500–º—Å (–º–∞–∫—Å–∏–º—É–º 10 —Å–ø—Ä–æ–±)
        setTimeout(() => {
          if (!initAttempted) {
            initializeTelegram();
          }
        }, 500);
      }
    };

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    if (typeof window !== 'undefined') {
      // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –ø–æ–≤–Ω–æ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Telegram WebApp
      setTimeout(initializeTelegram, 100);
    }
  }, [isAuthenticated, login, checkTokenValidity, initAttempted]);

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
  useEffect(() => {
    if (user && !isLoading) {
      const onboardingCompleted = localStorage.getItem('onboardingCompleted');
      const userOnboardingKey = `onboarding_${user.id}`;
      const userCompleted = localStorage.getItem(userOnboardingKey);

      const shouldShowOnboarding = !onboardingCompleted && !userCompleted;

      console.log('üéØ –û–Ω–±–æ—Ä–¥–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å:', {
        user: user.first_name,
        shouldShow: shouldShowOnboarding
      });

      if (shouldShowOnboarding) {
        setShowOnboarding(true);
      }

      setInitReady(true);
    }
  }, [user, isLoading]);

  const handleOnboardingComplete = () => {
    console.log('‚úÖ –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    if (user) {
      localStorage.setItem(`onboarding_${user.id}`, 'true');
    }
    localStorage.setItem('onboardingCompleted', 'true');
    setShowOnboarding(false);
  };

  // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  if (isLoading || (!initReady && !initAttempted)) {
    return (
      <div className="fixed inset-0 flex items-center justify-center bg-white dark:bg-slate-900">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-500 mx-auto mb-4"></div>
          <p className="text-gray-600 dark:text-gray-400">–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ OhMyRevit...</p>
        </div>
      </div>
    );
  }

  return (
    <>
      {showOnboarding && <Onboarding onComplete={handleOnboardingComplete} />}
      {children}
    </>
  );
}