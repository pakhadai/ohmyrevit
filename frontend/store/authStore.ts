// frontend/store/authStore.ts
import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import { User } from '@/types';
import { authAPI } from '@/lib/api';
import toast from 'react-hot-toast';

interface AuthState {
  user: User | null;
  token: string | null;
  isLoading: boolean;
  isAuthenticated: boolean;
  lastLoginAt: number | null; // –î–û–î–ê–ù–û: –ß–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —É—Å–ø—ñ—à–Ω–æ–≥–æ –ª–æ–≥—ñ–Ω—É

  // –ú–µ—Ç–æ–¥–∏
  login: (initData: object) => Promise<void>;
  logout: () => void;
  setUser: (user: User) => void;
  checkTokenValidity: () => void; // –î–û–î–ê–ù–û: –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—ñ —Ç–æ–∫–µ–Ω–∞
}

export const useAuthStore = create<AuthState>()(
  persist(
    (set, get) => ({
      user: null,
      token: null,
      isLoading: false,
      isAuthenticated: false,
      lastLoginAt: null, // –î–û–î–ê–ù–û

      login: async (initData: object) => {
        set({ isLoading: true });

        try {
          console.log('üîê AuthStore: –ü–æ—á–∏–Ω–∞—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é...');
          const response = await authAPI.loginTelegram(initData);

          console.log('‚úÖ AuthStore: –û—Ç—Ä–∏–º–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:', response);

          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
          if (response.user && response.access_token) {
            set({
              user: response.user,
              token: response.access_token,
              isAuthenticated: true,
              isLoading: false,
              lastLoginAt: Date.now(),
            });

            console.log('‚úÖ AuthStore: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π:', response.user.first_name);

            // –ù–ï –ø–æ–∫–∞–∑—É—î–º–æ toast —Ç—É—Ç - –≤—ñ–Ω –≤–∂–µ –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è –≤ AppProvider
          } else {
            throw new Error('–ù–µ–ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó');
          }
        } catch (error: any) {
          console.error('‚ùå AuthStore: –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:', error);

          set({
            isLoading: false,
            isAuthenticated: false,
            user: null,
            token: null
          });

          // –ö–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –¥–∞–ª—ñ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤ AppProvider
          throw error;
        }
      },

      logout: () => {
        set({
          user: null,
          token: null,
          isAuthenticated: false,
          lastLoginAt: null, // –î–û–î–ê–ù–û: –û—á–∏—â—É—î–º–æ —á–∞—Å
        });
        toast.success('–í–∏ –≤–∏–π—à–ª–∏ –∑ —Å–∏—Å—Ç–µ–º–∏');
      },

      setUser: (user: User) => {
        set({ user });
      },

      // –î–û–î–ê–ù–û: –ù–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
      checkTokenValidity: () => {
        const { lastLoginAt } = get();
        if (!lastLoginAt) return;

        // 24 –≥–æ–¥–∏–Ω–∏ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
        const TOKEN_LIFETIME_MS = 24 * 60 * 60 * 1000;

        if (Date.now() - lastLoginAt > TOKEN_LIFETIME_MS) {
          // –Ø–∫—â–æ —Ç–æ–∫–µ–Ω –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π - –≤–∏–∫–ª–∏–∫–∞—î–º–æ logout
          get().logout();
          toast.error("–°–µ—Å—ñ—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å –∑–Ω–æ–≤—É.");
        }
      },
    }),
    {
      name: 'auth-storage',
      partialize: (state) => ({
        user: state.user,
        token: state.token,
        isAuthenticated: state.isAuthenticated,
        lastLoginAt: state.lastLoginAt, // –î–û–î–ê–ù–û: –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
      }),
    }
  )
);